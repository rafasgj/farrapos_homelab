---
- name: Ensure podman is installed
  ansible.builtin.package:
    name: podman
    state: present

- name: Ensure registry directories exist
  ansible.builtin.file:
    path: "{{ item }}"
    mode: "0755"
    owner: root
    group: root
    state: directory
  loop:
    - /opt/registry
    - /opt/registry/data

- name: Define image name
  when: registry_image is undefined
  block:
    - name: Autodetect target architecture
      when: registry_arch is undefined and registry_image is undefined
      block:
        - name: Detect target platform
          ansible.builtin.shell: |
            set -eu
            case "$(uname -m)" in
              aarch*) echo -n "aarch64" ;;
              armv6*) echo -n "arm-6" ;;
              x86*) echo -n "x86-64" ;;
              *) exit 1 ;;
            esac
          args:
            executable: /bin/bash
          changed_when: false
          register: arch

        - name: Set registry_arch
          ansible.builtin.set_fact:
            registry_arch: "{{ arch.stdout }}"

    - name: For arm-6
      when: registry_arch == "arm-6"
      ansible.builtin.set_fact:
        registry_image: docker.io/arm32v6/registry:latest

    - name: For aaarch64
      when: registry_arch == "aarch64"
      ansible.builtin.set_fact:
        registry_image: docker.io/arm64v8/registry:latest

    - name: For x86-64
      when: registry_arch == "x86-64"
      ansible.builtin.set_fact:
        registry_image: docker.io/amd64/registry:latest

- name: Pull registry image
  ansible.builtin.shell: |
    podman pull {{ registry_image }}
    podman tag {{ registry_image }} localhost/farrapos_registry:latest
  changed_when: true

- name: Configure service and system
  vars:
    service_image: localhost/farrapos_registry:latest
    service_port: "{{ registry_port }}"
  block:
    - name: Check if quadlet is supported
      ansible.builtin.stat:
        path: /usr/libexec/podman/quadlet
      register: quadlet_support

    - name: Configure systemd service without quadlet
      when: not quadlet_support.stat.exists
      block:
        - name: Configure OCI registry service
          ansible.builtin.template:
            src: "files/{{ service_name }}.service"
            dest: "/opt/{{ service_name }}/farrapos_{{ service_name }}.service"
            owner: root
            group: root
            mode: "0644"

        - name: Create link for OCI registry service
          ansible.builtin.file:
            src: "/opt/{{ service_name }}/farrapos_{{ service_name }}.service"
            dest: "/etc/systemd/system/farrapos_{{ service_name }}.service"
            state: link

    - name: Configure systemd service with quadlet
      when: quadlet_support.stat.exists
      block:
        - name: Ensure quadlet_dir is set
          ansible.builtin.set_fact:
            quadlet_dir: /etc/containers/systemd
          when: quadlet_dir is undefined

        - name: Ensure systemd containers directories exist
          ansible.builtin.file:
            path: "{{ quadlet_dir }}"
            owner: root
            group: root
            mode: "0755"
            state: directory

        - name: Configure registry quadlet
          ansible.builtin.template:
            src: files/{{ service_name }}.container
            dest: "{{ quadlet_dir }}/farrapos_{{ service_name }}.container"
            owner: root
            group: root
            mode: "0644"

    - name: Ensure service is running
      ansible.builtin.systemd_service:
        daemon_reload: true
        name: "farrapos_{{ service_name }}"
        enabled: true
        state: restarted

    - name: Open ports in the firewall
      when: registry_use_firewalld
      block:
        - name: Ensure firewalld is available
          ansible.builtin.package:
            name: firewalld
            state: present

        - name: Configure firewalld for OCI registry
          ansible.posix.firewalld:
            port: "{{ item }}/tcp"
            permanent: true
            zone: public
            state: enabled
          when: item != ""
          loop:
            - "{{ service_port | default('5000') }}"
...
